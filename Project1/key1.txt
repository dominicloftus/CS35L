1.1
2.) C-s H T M L Enter
3.) C-s s c a v e n g e r Enter M-b
4.) C-s s e l f - Enter M-b
5.) C-s a r r o w Enter M-b
6.) C-e
7.) C-a

1.2
2.) C-s < ! - Enter C-a C-SP C-e Backspace
3.) C-s < ! - Enter C-a C-SP C-e Backspace
4.) C-s < ! - Enter C-a C-SP C-n C-n C-e Backspace
5.) C-s < ! - Enter Backspace Backspace Backspace C-d C-d C-d C-d C-n C-a C-SP C-n C-n C-n C-e Backspace C-s < ! - Enter C-a C-SP C-e Backspace

1.3
2.) C-s A s s i g n m e n t 1 M-% A s s i g n m e n t 4 2 Enter y y n
3.) M-< C-s U T F - 8 M-% U S - A S C I I Enter y n
4.) C-M-s [ ^ [ : a s c i i : ] ] Enter C-SP C-e Backspace
5.) C-s < / o l > Enter Enter 

1.4
3.) M-> C-r < ! - Enter C-SP C-e M-w M-g g 400 C-y
4.) M-> C-r < ! - C-r Enter C-SP C-n C-n C-n C-e M-w M-g g 385 C-y M->
C-r < ! - C-r C-r Enter C-SP C-u 7 C-f M-w M-g g 384 Enter C-e C-u 4 C-b C-y M->
C-r < ! - C-r C-r C-r Enter C-SP C-n C-n C-e M-w M-g g 340 Enter C-y M->
C-r < ! - C-r C-r C-r C-r Enter C-SP C-e M-w M-g g 127 Enter C-y m->
C-r < ! - C-r C-r C-r C-r C-r Enter C-SP C-e M-w M-g g 18 Enter C-y
5.) M-> C-r < ! - - SP e n d C-r Enter C-e C-SP M-> Backspace
6.) C-x u
7.) M-> C-r < ! - - SP e n d C-r Enter C-s --> M-% ..> Enter y y y y y y
M-> C-r < ! - - SP e n d C-r Enter Enter < ! - - M-> - - >
8.) C-s < o l > M-% < o L > Enter y y y y y y y (there were 7 instances)

1.5
1.) C-x d Enter + j u n k Enter
2.) C-x d j u n k Enter C-x C-f h e l l o . c Enter (copy and paste code)
3.) C-x d j u n k Enter M-x c o m p i l e Enter g c c SP h e l l o . c SP - o SP h e l l o Enter
4.) C-x d j u n k Enter C-x b h e l l o - o u t Enter C-u M-! . / h e l l o Enter
5.) C-Sp M-> M-w C-x C-f Backspace Backspace Backspace Backspace k e y 1 . t x t M-> C-y
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}


1.6
1.) C-x b *scratch* Enter
2.) ( r a n d o m SP " 2 0 4 - 9 1 0 - 8 6 3 " ) Enter C-j (result was -2006878877083158470)
3.) ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) ) C-j
4.) ( * SP x SP y ) C-j (the answer is not mathmatically correct)
5.) M-: ( * SP x SP y ) Enter (it returns a decimal, octal and hexadecimal answer however it still appears to be incorrect)
6.) No it is not truly random. It uses the key input, like our student id, in order to come up with an apparently random number.
7.) A product will be incorrect when overflow occurs, or the product exceeds the maximum integer value given a certain amount of bits. so if n is the largest possible integer value then n^1/2 would be the largest both x and y could be without overflowing. the chance of one being less than n^1/2 is (n^1/2)/n. so the chance of a correct product would be 1/n meaning the chance of an incorrect product is (n-1)/n which is very high.
